<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : xml파일은 여러개일 수 있음. 
이를 구별하기 위한 식별 용도로 사용 -->
<mapper namespace="kr.or.ddit.mapper.BookMapper">
	<!-- MyBatis에서 제공해주는 데이터 입력을 나타내는 태그
	1) 드루와 : mapper 객체가 던진 데이터타입.parameterType만 씀
	2) 가즈아 : mapper 객체의 메소드 쪽으로 리턴할 타입.
	  - resultType : vo, hashMap, String, int
	  - resultMap  : MyBatis의 resultMap 태그를 사용
	-->
	<!-- 
	(전)BookVO{bookId=0,title=총알탄 개똥이, category=소설, price=10000,
			insertDate=null}
	(후)BookVO{bookId=1,title=총알탄 개똥이, category=소설, price=10000,
			insertDate=null}
	-->
	<!-- public int createPost(BookVO bookVO); 
	I/U/D 태그의 경우 resultType은 생략. 당연히 int 타입이므로.
	-->
	<insert id="createPost" parameterType="kr.or.ddit.vo.BookVO">
		<!-- INSERT문을 실행하기 전(BEFORE)에 먼저 SELECT부터 실행 하자 -->
		<selectKey resultType="int" order="BEFORE" keyProperty="bookId">
			SELECT NVL(MAX(BOOK_ID),0)+1 FROM BOOK
		</selectKey>
	
		INSERT INTO BOOK(BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE)
		VALUES(#{bookId}, #{title}, #{category}, #{price}, SYSDATE)
	</insert>
	
	<!-- 
	//도서 상세
	public BookVO detail(BookVO bookVO)
	 -->
	 <!-- 책 상세보기 
		select 태그는 조회(select) 쿼리를 실행하기 위한 mybatis 태그.
		parameterType(book-Mapper.xml로 드루와) : bookVO 타입
		resultType(BookMapper로 가즈아) : bookVO 타입
	-->
	<!-- bookVO(드루와)=>{"bookId":"3","title":"","category":"","price":0,"insertDate":""} -->
	<!-- bookVO(가즈아)=>{"bookId":"3","title":"총알탄 개똥이","category":"소설","price":10000,"insertDate":"22/07/19"} -->
	<select id="detail" parameterType="kr.or.ddit.vo.BookVO"
		resultType="kr.or.ddit.vo.BookVO">
		SELECT BOOK_ID
		     , TITLE
		     , CATEGORY
		     , PRICE
		     , INSERT_DATE
		FROM   BOOK
		WHERE  BOOK_ID = #{bookId}
	</select>
	
	<!--책 수정하기. 
	public int updatePost(BookVO bookVO);
	 
	update태그는 update 쿼리를 실행하기 위한 마이바티스 태그 
	bookVO{bookId=1,title=김민수과 양미강의 콜라보, category=음악, price=1200000}
	insert, update, delete의 경우 resultType 또는 resultMap은 생략
	 -->
	<update id="updatePost" parameterType="kr.or.ddit.vo.BookVO">
		UPDATE BOOK
		SET    TITLE = #{title}, CATEGORY = #{category}
			 , PRICE = #{price}
		WHERE  BOOK_ID = #{bookId}
	</update>
	
	<!-- 도서 삭제
	delete태그는 delete 쿼리를 실행하기 위한 마이바티스 태그 
	bookVO{bookId=3,title=김정민과 박선혜의 콜라보, category=음악, price=1200000}
	insert, update, delete의 경우 resultType 또는 resultMap은 생략
	 -->
	<delete id="deletePost" parameterType="kr.or.ddit.vo.BookVO">
		DELETE FROM BOOK
		WHERE  BOOK_ID = #{bookId}
	</delete>
	
	<!-- 
	도서 목록
	public List<BookVO> list(Map<String,Object> map);
	
	파라미터 : map{keyword=설} or map{keyword=} 
	 -->
	<select id="list" parameterType="hashMap" resultType="kr.or.ddit.vo.BookVO">
		SELECT BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE 
		FROM   BOOK
		WHERE  1 = 1
		<if test="keyword!=null and keyword!=''">
		AND    (TITLE LIKE '%' || #{keyword} || '%' 
				OR CATEGORY LIKE '%' || #{keyword} || '%'
		        OR PRICE LIKE '%' || #{keyword} || '%')
		</if>
		ORDER BY BOOK_ID
	</select>
</mapper>









