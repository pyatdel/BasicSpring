1. 모달 구현

<div id="kjModal">
    <div id="kjCont">
        <form id="suminForm2">
            <input type="hidden" name="idolId">
            이름 <input name="idolName" readonly><br>
            나이 <input name="idolAge"><br>
            사진 <input type="file" name="idolSajin"><br>
            <button type="submit">수정</button>
            <button onclick="remIdol(this)">삭제</button>
        </form>
    </div>
</div>

<style>
    #kjModal {
        position: fixed;
        width: 100%; height: 100%;
        left: 0; top: 0;
        background-color: rgba(255,0,255,0.7);
        display: none;
    }
</style>

-fixed 포지션으로 전체화면 덮기
-반투명 배경과 중앙 정렬된 콘텐츠
-폼 요소들을 이용한 데이터 표시/수정

2. 파일 수정 처리

suminForm2.onsubmit = function() {
    event.preventDefault();
    let formData = new FormData();
    
    // 기본 정보 추가
    formData.append("idolId", this.idolId.value);
    formData.append("idolName", this.idolName.value);
    formData.append("idolAge", this.idolAge.value);
    
    // 파일 선택된 경우만 추가
    if(this.idolSajin.files.length) {
        formData.append("idolFiles", this.idolSajin.files[0]);
    }
    
    fetch("/api/idols2", {
        method: "put",
        body: formData
    }).then(resp => resp.text())
      .then(rslt => {
          if(rslt == 1) getList();
      });
}
-FormData 활용 (파일 전송시 필수)
-파일 선택 여부에 따른 조건부 처리
-기존 정보 유지와 새로운 파일 업로드 처리

3. 삭제 기능

function remIdol(btn) {
    let idolId = btn.form.idolId.value;
    
    fetch(`/api/idols/${idolId}`, {
        method: "delete"
    }).then(resp => resp.text())
      .then(rslt => {
          if(rslt == 1) getList();
      });
}
-RESTful API 방식의 삭제 처리
-삭제 후 화면 갱신

4. 상태 관리
-작업 완료 후 모달 닫기
-목록 자동 갱신
-사용자 피드백 (alert)